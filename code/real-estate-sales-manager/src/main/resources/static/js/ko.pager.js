// Generated by IcedCoffeeScript 108.0.11
(function () {
    this.PagerModel = function (url, querystrings, withoutLoad, fnLoaded, fnBound) {
        var self;
        self = this;
        self.Url = ko.observable(url);
        self.QueryStrings = ko.observable(querystrings || '');
        self.Items = ko.observableArray([]);
        self.CurrentPage = ko.observable(0);
        self.PageSize = ko.observable(1);
        self.TotalItemCount = ko.observable(0);
        self.IsLoading = ko.observable(false);
        self.HasError = ko.observable(false);
        self.OnLoaded = fnLoaded;
        self.OnBound = fnBound;
        self.Reload = function (qs) {
            if (typeof qs !== "undefined") {
                self.QueryStrings(qs);
                return self.OnPage(1);
            } else {
                return self.OnPage(self.CurrentPage());
            }
        };
        self.OnPage = function (p) {
            self.CurrentPage(p);
            if (typeof self.AjaxUrl !== "undefined" || self.Url() !== "undefined") {
                self.IsLoading(true);
                url = typeof self.AjaxUrl !== "undefined" ? self.AjaxUrl() : self.Url();
                if (!url) {
                    console.error("Please specify the url for ajax.");
                    return;
                }
                if (self.QueryStrings()) {
                    url += url.indexOf("?") > 0 ? "&" : "?";
                    url += self.QueryStrings();
                }
                if (url.indexOf("page=") > 0) {
                    url = url.replace(/page=\d+(?=&|$)/g, "page=" + p);
                } else {
                    url += url.indexOf('?') < 0 ? '?' : '&';
                    url += "page=" + p;
                }
                dialog.loading();
                $.post(url.split('?')[0], url.split('?')[1], function (data) {
                    var handledData;
                    self.HasError(false);
                    if ($.isArray(data.Items) && data.Items.length === 0 && self.CurrentPage() > 1) {
                        self.OnPage(p - 1);
                        return;
                    }
                    if (self.OnLoaded) {
                        handledData = self.OnLoaded(data);
                        if (typeof handledData !== 'undefined') {
                            data = handledData;
                            ko.mapping.fromJS(handledData, {}, self);
                        } else {
                            ko.mapping.fromJS(data, {}, self);
                        }
                    } else {
                        ko.mapping.fromJS(data, {}, self);
                    }
                    if (self.OnBound) {
                        return self.OnBound(data);
                    }
                }, 'json').fail(function (args) {
                    self.HasError(true);
                    if (self.OnError) {
                        return self.OnError(args);
                    } else {
                        return console.error(args);
                    }
                }).always(function () {
                    self.IsLoading(false);
                    return dialog.loaded();
                });
            }
        };
        if (typeof url !== "undefined" && !withoutLoad) {
            self.OnPage(1);
        }
    };
    ko.components.register("ko-pager", {
        viewModel: function (params) {
            var self;
            self = this;
            if (typeof params.model === "undefined") {
                console.error("Please specify the model of params attribute for ko-pager component.");
            }
            self.model = params.model;
            if ($.isFunction(self.model.CurrentPage)) {
                self.pageNumber = self.model.CurrentPage;
            } else {
                self.pageNumber = ko.observable(self.model.CurrentPage);
            }
            if ($.isFunction(self.model.PageSize)) {
                self.pageSize = self.model.PageSize;
            } else {
                self.pageSize = ko.observable(self.model.PageSize);
            }
            if ($.isFunction(self.model.TotalItemCount)) {
                self.itemTotal = self.model.TotalItemCount;
            } else {
                self.itemTotal = ko.observable(self.model.TotalItemCount);
            }
            if ($.isFunction(self.model.HasError)) {
                self.hasError = self.model.HasError;
            } else {
                self.hasError = ko.observable(false);
            }
            if ($.isFunction(self.model.IsLoading)) {
                self.isLoading = self.model.IsLoading;
            } else {
                self.isLoading = ko.observable(false);
            }
            self.changePage = self.model.OnPage;
            self.pageCount = function () {
                var pc, _ref;
                pc = Math.floor(self.itemTotal() / self.pageSize()) + ((_ref = self.itemTotal() % self.pageSize() > 0) != null ? _ref : {
                            1: 0
                        });
                // if (pc > 1000) {
                //   return 1000;
                // }
                return pc;
            };
            self.pageNumbers = (function () {
                var p, pc, pn, results, _i, _j, _k, _l, _m, _n, _ref, _ref1, _ref2, _ref3, _ref4;
                results = [];
                //总条数
                pc = self.pageCount();
                //当前页数
                pn = self.pageNumber();
                if (pc <= 10) {
                    for (p = _i = 1; 1 <= pc ? _i <= pc : _i >= pc; p = 1 <= pc ? ++_i : --_i) {
                        results.push(p);
                    }
                } else {
                   // for (p = _j = 1; _j <= 2; p = ++_j) {
                   //     results.push(p);
                   // }
                	//前6页
                    if (pn <= 6) {
                        for (p = _k = 1; _k <= 10; p = ++_k) {
                            results.push(p);
                        }
                       // results.push(-1);
                    } 
                    //后4页  38>=42-4
                    else if (pn >= pc - 4) {
                        //results.push(-1);
                        for (p = _l = _ref = pc - 9, _ref1 = pc; _ref <= _ref1 ? _l <= _ref1 : _l >= _ref1; p = _ref <= _ref1 ? ++_l : --_l) {
                            results.push(p);
                        }
                   //中间的页数   
                   }else {
                       // results.push(-1);
                        for (p = _m = _ref2 = pn - 5, _ref3 = pn + 4; _ref2 <= _ref3 ? _m <= _ref3 : _m >= _ref3; p = _ref2 <= _ref3 ? ++_m : --_m) {
                            results.push(p);
                        }
                        //results.push(-1);
                    }
                    //for (p = _n = _ref4 = pc - 1; _ref4 <= pc ? _n <= pc : _n >= pc; p = _ref4 <= pc ? ++_n : --_n) {
                    //    results.push(p);
                    //}
                }
                return results;
            }).bind(self);
            self.page = function (p) {
                var url;
                if (p < 0 || self.pageNumber() === p) {
                    return;
                }
                if (self.changePage) {
                    self.changePage(p);
                } else {
                    url = location.href;
                    if (url.indexOf("page=") > 0) {
                        url = url.replace(/page=\d+(?=&|$)/g, "page=" + p);
                    } else {
                        url += url.indexOf('?') > 0 ? "&" : "?";
                        url += "page=" + p;
                    }
                    location.href = url;
                }
            };
        },
        template: '<div class="page-nav" aria-label="Page navigation" data-bind="visible: itemTotal() > 0"><span class="total-page">共<span data-bind="text:pageCount()"></span>页</span><span class="total-num"><i><span data-bind="text:itemTotal()"></span></i>条记录</span><ul><li data-bind="click: function(){ page(pageNumber()>1?pageNumber()-1:1) }"><a aria-label="Previous" href="#"><i aria-hidden="true" class="icon-prev"></i></a></li><!-- ko foreach: pageNumbers() --><li data-bind="click: $parent.page"><a href="#" data-bind="css:{current: $parent.pageNumber() == $data, disabled: $data < 0},text: $data, visible: $data > 0"></a><a href="#" data-bind="visible: $data < 0">...</a></li><!-- /ko --><li data-bind="click: function(){ page(pageNumber()< pageCount() ? pageNumber()+1 : pageCount()) }"><a aria-label="Next" href="javascript:;"><i class="icon-next" aria-hidden="true"></i></a></li></ul></div> '
    });

    ko.components.register("ko-pager-state", {
        viewModel: function (params) {
            var self;
            self = this;
            self.Items = params.model && params.model.Items ? params.model.Items : ko.observableArray([]);
            self.IsLoading = params.model && params.model.IsLoading ? params.model.IsLoading : ko.observable(false);
        },
        template: '<div class="text-center">\n    <div data-bind="visible: Items().length == 0 && !IsLoading()">\n        <ko-nodata></ko-nodata>\n    </div>\n    <!--\n    <div data-bind="visible: IsLoading()">\n        <ko-loading></ko-loading>\n    </div>\n    -->\n</div>'
    });

    ko.components.register("ko-pager-small", {
        viewModel: function (params) {
            var self;
            self = this;
            if (typeof params.model === "undefined") {
                console.error("Please specify the model of params attribute for ko-pager component.");
            }
            self.model = params.model;
            if ($.isFunction(self.model.CurrentPage)) {
                self.pageNumber = self.model.CurrentPage;
            } else {
                self.pageNumber = ko.observable(self.model.CurrentPage);
            }
            if ($.isFunction(self.model.PageSize)) {
                self.pageSize = self.model.PageSize;
            } else {
                self.pageSize = ko.observable(self.model.PageSize);
            }
            if ($.isFunction(self.model.TotalItemCount)) {
                self.itemTotal = self.model.TotalItemCount;
            } else {
                self.itemTotal = ko.observable(self.model.TotalItemCount);
            }
            if ($.isFunction(self.model.HasError)) {
                self.hasError = self.model.HasError;
            } else {
                self.hasError = ko.observable(false);
            }
            if ($.isFunction(self.model.IsLoading)) {
                self.isLoading = self.model.IsLoading;
            } else {
                self.isLoading = ko.observable(false);
            }
            self.changePage = self.model.OnPage;
            self.pageCount = function () {
                var pc, _ref;
                pc = Math.floor(self.itemTotal() / self.pageSize()) + ((_ref = self.itemTotal() % self.pageSize() > 0) != null ? _ref : {
                            1: 0
                        });
                // if (pc > 1000) {
                //   return 1000;
                // }
                return pc;
            };
            self.pageNumbers = (function () {
                var p, pc, pn, results, _i, _j, _k, _l, _m, _n, _ref, _ref1, _ref2, _ref3, _ref4;
                results = [];
                //总条数
                pc = self.pageCount();
                //当前页数
                pn = self.pageNumber();
                if (pc <= 6) {
                    for (p = _i = 1; 1 <= pc ? _i <= pc : _i >= pc; p = 1 <= pc ? ++_i : --_i) {
                        results.push(p);
                    }
                } else {
                   // for (p = _j = 1; _j <= 2; p = ++_j) {
                   //     results.push(p);
                   // }
                	//前4页
                    if (pn <= 4) {
                        for (p = _k = 1; _k <= 6; p = ++_k) {
                            results.push(p);
                        }
                       // results.push(-1);
                    } 
                    //后2页
                    else if (pn >= pc - 2) {
                        //results.push(-1);
                        for (p = _l = _ref = pc - 5, _ref1 = pc; _ref <= _ref1 ? _l <= _ref1 : _l >= _ref1; p = _ref <= _ref1 ? ++_l : --_l) {
                            results.push(p);
                        }
                   //中间的页数   
                   }else {
                       // results.push(-1);
                        for (p = _m = _ref2 = pn - 3, _ref3 = pn + 2; _ref2 <= _ref3 ? _m <= _ref3 : _m >= _ref3; p = _ref2 <= _ref3 ? ++_m : --_m) {
                            results.push(p);
                        }
                        //results.push(-1);
                    }
                    //for (p = _n = _ref4 = pc - 1; _ref4 <= pc ? _n <= pc : _n >= pc; p = _ref4 <= pc ? ++_n : --_n) {
                    //    results.push(p);
                    //}
                }
                return results;
            }).bind(self);
            self.page = function (p) {
                var url;
                if (p < 0 || self.pageNumber() === p) {
                    return;
                }
                if (self.changePage) {
                    self.changePage(p);
                } else {
                    url = location.href;
                    if (url.indexOf("page=") > 0) {
                        url = url.replace(/page=\d+(?=&|$)/g, "page=" + p);
                    } else {
                        url += url.indexOf('?') > 0 ? "&" : "?";
                        url += "page=" + p;
                    }
                    location.href = url;
                }
            };
        },
        template: '<div class="page-nav" aria-label="Page navigation" data-bind="visible: itemTotal() > 0"><span class="total-num"><i><span data-bind="text:itemTotal()"></span></i>条记录</span><ul><li data-bind="click: function(){ page(pageNumber()>1?pageNumber()-1:1) }"><a aria-label="Previous" href="#"><i aria-hidden="true" class="icon-prev"></i></a></li><!-- ko foreach: pageNumbers() --><li data-bind="click: $parent.page"><a href="#" data-bind="css:{current: $parent.pageNumber() == $data, disabled: $data < 0},text: $data, visible: $data > 0"></a><a href="#" data-bind="visible: $data < 0">...</a></li><!-- /ko --><li data-bind="click: function(){ page(pageNumber()< pageCount() ? pageNumber()+1 : pageCount()) }"><a aria-label="Next" href="javascript:;"><i class="icon-next" aria-hidden="true"></i></a></li></ul></div> '
    });


}).call(this);
